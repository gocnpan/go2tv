package httphandlers

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"os/exec"
	"strings"
	"testing"
	"time"

	"github.com/gocnpan/go2tv/soapcalls"
)

func TestServeContent(t *testing.T) {
	videoBytes := []byte{0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x6D, 0x70, 0x34, 0x32, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x70, 0x34, 0x32, 0x6D, 0x70, 0x34, 0x31, 0x69, 0x73, 0x6F, 0x6D, 0x69, 0x73, 0x6F, 0x32, 0x00, 0x00, 0x00, 0x08, 0x66, 0x72, 0x65, 0x65, 0x00, 0x00, 0x04, 0x9D, 0x6D, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x02, 0x09, 0x10, 0x00, 0x00, 0x00, 0x1B, 0x67, 0xF4, 0x00, 0x0D, 0x91, 0x9B, 0x2B, 0xD8, 0x0B, 0x50, 0x60, 0x10, 0x54, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x62, 0x3C, 0x50, 0xA6, 0x58, 0x00, 0x00, 0x00, 0x05, 0x68, 0xEB, 0xEC, 0x44, 0x80, 0x00, 0x00, 0x02, 0xF5, 0x06, 0x05, 0xFF, 0xFF, 0xF1, 0xDC, 0x45, 0xE9, 0xBD, 0xE6, 0xD9, 0x48, 0xB7, 0x96, 0x2C, 0xD8, 0x20, 0xD9, 0x23, 0xEE, 0xEF, 0x78, 0x32, 0x36, 0x34, 0x20, 0x2D, 0x20, 0x63, 0x6F, 0x72, 0x65, 0x20, 0x31, 0x35, 0x32, 0x20, 0x72, 0x32, 0x38, 0x35, 0x34, 0x20, 0x65, 0x39, 0x61, 0x35, 0x39, 0x30, 0x33, 0x20, 0x2D, 0x20, 0x48, 0x2E, 0x32, 0x36, 0x34, 0x2F, 0x4D, 0x50, 0x45, 0x47, 0x2D, 0x34, 0x20, 0x41, 0x56, 0x43, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79, 0x6C, 0x65, 0x66, 0x74, 0x20, 0x32, 0x30, 0x30, 0x33, 0x2D, 0x32, 0x30, 0x31, 0x37, 0x20, 0x2D, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x6C, 0x61, 0x6E, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x78, 0x32, 0x36, 0x34, 0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x2D, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x3A, 0x20, 0x63, 0x61, 0x62, 0x61, 0x63, 0x3D, 0x31, 0x20, 0x72, 0x65, 0x66, 0x3D, 0x33, 0x20, 0x64, 0x65, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x3D, 0x31, 0x3A, 0x30, 0x3A, 0x30, 0x20, 0x61, 0x6E, 0x61, 0x6C, 0x79, 0x73, 0x65, 0x3D, 0x30, 0x78, 0x31, 0x3A, 0x30, 0x78, 0x31, 0x31, 0x31, 0x20, 0x6D, 0x65, 0x3D, 0x68, 0x65, 0x78, 0x20, 0x73, 0x75, 0x62, 0x6D, 0x65, 0x3D, 0x37, 0x20, 0x70, 0x73, 0x79, 0x3D, 0x31, 0x20, 0x70, 0x73, 0x79, 0x5F, 0x72, 0x64, 0x3D, 0x31, 0x2C, 0x30, 0x30, 0x3A, 0x30, 0x2C, 0x30, 0x30, 0x20, 0x6D, 0x69, 0x78, 0x65, 0x64, 0x5F, 0x72, 0x65, 0x66, 0x3D, 0x31, 0x20, 0x6D, 0x65, 0x5F, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x3D, 0x31, 0x36, 0x20, 0x63, 0x68, 0x72, 0x6F, 0x6D, 0x61, 0x5F, 0x6D, 0x65, 0x3D, 0x31, 0x20, 0x74, 0x72, 0x65, 0x6C, 0x6C, 0x69, 0x73, 0x3D, 0x31, 0x20, 0x38, 0x78, 0x38, 0x64, 0x63, 0x74, 0x3D, 0x30, 0x20, 0x63, 0x71, 0x6D, 0x3D, 0x30, 0x20, 0x64, 0x65, 0x61, 0x64, 0x7A, 0x6F, 0x6E, 0x65, 0x3D, 0x32, 0x31, 0x2C, 0x31, 0x31, 0x20, 0x66, 0x61, 0x73, 0x74, 0x5F, 0x70, 0x73, 0x6B, 0x69, 0x70, 0x3D, 0x31, 0x20, 0x63, 0x68, 0x72, 0x6F, 0x6D, 0x61, 0x5F, 0x71, 0x70, 0x5F, 0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3D, 0x34, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x3D, 0x31, 0x20, 0x6C, 0x6F, 0x6F, 0x6B, 0x61, 0x68, 0x65, 0x61, 0x64, 0x5F, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x3D, 0x31, 0x20, 0x73, 0x6C, 0x69, 0x63, 0x65, 0x64, 0x5F, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x3D, 0x30, 0x20, 0x6E, 0x72, 0x3D, 0x30, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6D, 0x61, 0x74, 0x65, 0x3D, 0x31, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6C, 0x61, 0x63, 0x65, 0x64, 0x3D, 0x30, 0x20, 0x62, 0x6C, 0x75, 0x72, 0x61, 0x79, 0x5F, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x74, 0x3D, 0x30, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x5F, 0x69, 0x6E, 0x74, 0x72, 0x61, 0x3D, 0x30, 0x20, 0x62, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x3D, 0x33, 0x20, 0x62, 0x5F, 0x70, 0x79, 0x72, 0x61, 0x6D, 0x69, 0x64, 0x3D, 0x32, 0x20, 0x62, 0x5F, 0x61, 0x64, 0x61, 0x70, 0x74, 0x3D, 0x31, 0x20, 0x62, 0x5F, 0x62, 0x69, 0x61, 0x73, 0x3D, 0x30, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x3D, 0x31, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x62, 0x3D, 0x31, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x5F, 0x67, 0x6F, 0x70, 0x3D, 0x30, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x70, 0x3D, 0x32, 0x20, 0x6B, 0x65, 0x79, 0x69, 0x6E, 0x74, 0x3D, 0x31, 0x32, 0x30, 0x20, 0x6B, 0x65, 0x79, 0x69, 0x6E, 0x74, 0x5F, 0x6D, 0x69, 0x6E, 0x3D, 0x31, 0x32, 0x20, 0x73, 0x63, 0x65, 0x6E, 0x65, 0x63, 0x75, 0x74, 0x3D, 0x34, 0x30, 0x20, 0x69, 0x6E, 0x74, 0x72, 0x61, 0x5F, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3D, 0x30, 0x20, 0x72, 0x63, 0x5F, 0x6C, 0x6F, 0x6F, 0x6B, 0x61, 0x68, 0x65, 0x61, 0x64, 0x3D, 0x34, 0x30, 0x20, 0x72, 0x63, 0x3D, 0x63, 0x62, 0x72, 0x20, 0x6D, 0x62, 0x74, 0x72, 0x65, 0x65, 0x3D, 0x31, 0x20, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x3D, 0x32, 0x30, 0x34, 0x38, 0x20, 0x72, 0x61, 0x74, 0x65, 0x74, 0x6F, 0x6C, 0x3D, 0x31, 0x2C, 0x30, 0x20, 0x71, 0x63, 0x6F, 0x6D, 0x70, 0x3D, 0x30, 0x2C, 0x36, 0x30, 0x20, 0x71, 0x70, 0x6D, 0x69, 0x6E, 0x3D, 0x30, 0x20, 0x71, 0x70, 0x6D, 0x61, 0x78, 0x3D, 0x36, 0x39, 0x20, 0x71, 0x70, 0x73, 0x74, 0x65, 0x70, 0x3D, 0x34, 0x20, 0x76, 0x62, 0x76, 0x5F, 0x6D, 0x61, 0x78, 0x72, 0x61, 0x74, 0x65, 0x3D, 0x32, 0x30, 0x34, 0x38, 0x20, 0x76, 0x62, 0x76, 0x5F, 0x62, 0x75, 0x66, 0x73, 0x69, 0x7A, 0x65, 0x3D, 0x31, 0x32, 0x32, 0x38, 0x20, 0x6E, 0x61, 0x6C, 0x5F, 0x68, 0x72, 0x64, 0x3D, 0x6E, 0x6F, 0x6E, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x6C, 0x65, 0x72, 0x3D, 0x30, 0x20, 0x69, 0x70, 0x5F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x3D, 0x31, 0x2C, 0x34, 0x30, 0x20, 0x61, 0x71, 0x3D, 0x31, 0x3A, 0x31, 0x2C, 0x30, 0x30, 0x00, 0x80, 0x00, 0x00, 0x01, 0x6A, 0x65, 0x88, 0x84, 0x00, 0x16, 0xFF, 0xF3, 0x77, 0x6D, 0x92, 0xA1, 0x32, 0xBD, 0x6E, 0x1A, 0x2A, 0x48, 0x39, 0x3A, 0xE4, 0xD7, 0x8F, 0x80, 0x56, 0x69, 0x45, 0xEE, 0x9E, 0xAA, 0xCE, 0x13, 0xC1, 0x20, 0x64, 0xE9, 0x27, 0x01, 0xC3, 0x3B, 0x11, 0x7D, 0x8F, 0x99, 0x1B, 0xE5, 0xC8, 0x9A, 0x1F, 0x7D, 0x66, 0x89, 0x37, 0x4D, 0x2F, 0x0A, 0xE9, 0x66, 0xBD, 0x01, 0x37, 0xC4, 0xB5, 0x31, 0x82, 0xA8, 0x86, 0xC3, 0x1A, 0xC7, 0xCE, 0x4C, 0x65, 0x9D, 0x34, 0x67, 0xB1, 0xEA, 0xF6, 0x54, 0x69, 0x4F, 0x81, 0x45, 0xCC, 0x6F, 0x1A, 0x9B, 0xE4, 0x6F, 0x13, 0x5C, 0x6A, 0x13, 0xB6, 0xA9, 0x0C, 0x4C, 0xDC, 0x40, 0x85, 0xED, 0x7B, 0x0C, 0xC9, 0x68, 0x42, 0xCC, 0x98, 0x3A, 0xF9, 0xCC, 0x99, 0x12, 0xCF, 0x39, 0x07, 0x89, 0x6D, 0xC1, 0xA8, 0xBC, 0xF4, 0xA0, 0xD9, 0xB5, 0x2E, 0x5E, 0xF6, 0x51, 0x6F, 0x88, 0x6E, 0xED, 0xF6, 0x0C, 0x5D, 0xD9, 0x0C, 0x7C, 0xD7, 0x17, 0x67, 0x2F, 0x33, 0xF1, 0xB4, 0x86, 0xCC, 0x82, 0x85, 0xF8, 0x33, 0x36, 0x2A, 0xF8, 0xBA, 0x43, 0x31, 0x29, 0x99, 0x49, 0xA7, 0xE7, 0x2B, 0x4F, 0xD2, 0x5B, 0x6B, 0xE9, 0x40, 0xD1, 0x6A, 0x4C, 0xB5, 0xFA, 0xD9, 0xC1, 0x62, 0x1E, 0x3A, 0x94, 0x0C, 0x51, 0x72, 0xD7, 0x33, 0x36, 0x74, 0xE8, 0x81, 0x1A, 0x3F, 0x86, 0x09, 0x04, 0xBA, 0xE2, 0x0B, 0x02, 0x84, 0xA9, 0x70, 0x03, 0x10, 0x60, 0x0D, 0x02, 0xC9, 0x24, 0xB3, 0xE7, 0xE2, 0x60, 0xFF, 0x4E, 0xB0, 0x1E, 0x78, 0x0B, 0x0F, 0x43, 0xAA, 0x3E, 0x21, 0x27, 0xD2, 0x6F, 0x68, 0x18, 0x6C, 0x5F, 0xAC, 0x27, 0x39, 0x59, 0x7C, 0xBB, 0xA1, 0x94, 0x5E, 0x9D, 0x7B, 0x92, 0xCD, 0xD9, 0x7B, 0x1C, 0x8F, 0xB3, 0xE2, 0x65, 0x4B, 0x63, 0x88, 0xE5, 0xEE, 0x89, 0x5F, 0xF4, 0xFC, 0x87, 0xEF, 0xDF, 0x4F, 0x22, 0x28, 0xE4, 0x15, 0x0F, 0xD8, 0x62, 0x71, 0x27, 0x08, 0x43, 0x50, 0x66, 0x29, 0x9D, 0x3C, 0xF7, 0x9D, 0x68, 0x8F, 0xD8, 0x56, 0xA3, 0xF6, 0xAC, 0x43, 0xA4, 0x09, 0x16, 0x6A, 0xA5, 0xB7, 0xED, 0xE7, 0xF8, 0x94, 0x78, 0xEE, 0x0D, 0xEB, 0x65, 0xE8, 0xA9, 0x51, 0xD4, 0x38, 0xF4, 0x21, 0xFE, 0x86, 0x49, 0x0E, 0xAB, 0x4F, 0xB6, 0xD3, 0xB9, 0x96, 0x9A, 0x4C, 0xEE, 0x4C, 0x57, 0x9F, 0xE3, 0xFD, 0x99, 0x92, 0xCD, 0xC1, 0x43, 0x4A, 0xFB, 0x55, 0x80, 0xD8, 0x2E, 0x05, 0x12, 0x1F, 0x65, 0x85, 0xF6, 0xD4, 0xE0, 0x4E, 0x2C, 0x17, 0x02, 0x55, 0x56, 0xFD, 0x49, 0x99, 0xB6, 0x65, 0x39, 0xDD, 0x00, 0x00, 0x03, 0x73, 0x6D, 0x6F, 0x6F, 0x76, 0x00, 0x00, 0x00, 0x6C, 0x6D, 0x76, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x81, 0xE7, 0xF6, 0xDE, 0x81, 0xE7, 0xF6, 0x00, 0x00, 0x09, 0x60, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0xC2, 0x74, 0x72, 0x61, 0x6B, 0x00, 0x00, 0x00, 0x5C, 0x74, 0x6B, 0x68, 0x64, 0x00, 0x00, 0x00, 0x07, 0xDE, 0x81, 0xE7, 0xF6, 0xDE, 0x81, 0xE7, 0xF6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x65, 0x64, 0x74, 0x73, 0x00, 0x00, 0x00, 0x1C, 0x65, 0x6C, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x6D, 0x64, 0x69, 0x61, 0x00, 0x00, 0x00, 0x20, 0x6D, 0x64, 0x68, 0x64, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x81, 0xE7, 0xF6, 0xDE, 0x81, 0xE7, 0xF6, 0x00, 0x00, 0x04, 0xB0, 0x00, 0x00, 0x00, 0x64, 0x55, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x68, 0x64, 0x6C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x69, 0x64, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00, 0x00, 0x00, 0x01, 0x8C, 0x6D, 0x69, 0x6E, 0x66, 0x00, 0x00, 0x00, 0x14, 0x76, 0x6D, 0x68, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x64, 0x69, 0x6E, 0x66, 0x00, 0x00, 0x00, 0x1C, 0x64, 0x72, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x75, 0x72, 0x6C, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x4C, 0x73, 0x74, 0x62, 0x6C, 0x00, 0x00, 0x00, 0xD0, 0x73, 0x74, 0x73, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC0, 0x61, 0x76, 0x63, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x33, 0x61, 0x76, 0x63, 0x43, 0x01, 0xF4, 0x00, 0x0D, 0xFF, 0xE1, 0x00, 0x1B, 0x67, 0xF4, 0x00, 0x0D, 0x91, 0x9B, 0x2B, 0xD8, 0x0B, 0x50, 0x60, 0x10, 0x54, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x62, 0x3C, 0x50, 0xA6, 0x58, 0x01, 0x00, 0x05, 0x68, 0xEB, 0xEC, 0x44, 0x80, 0x00, 0x00, 0x00, 0x14, 0x62, 0x74, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0xB7, 0xE0, 0x00, 0x00, 0x00, 0x13, 0x63, 0x6F, 0x6C, 0x72, 0x6E, 0x63, 0x6C, 0x78, 0x00, 0x06, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x10, 0x70, 0x61, 0x73, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x73, 0x74, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x73, 0x74, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x73, 0x74, 0x73, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x73, 0x74, 0x73, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x95, 0x00, 0x00, 0x00, 0x14, 0x73, 0x74, 0x63, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x59, 0x75, 0x64, 0x74, 0x61, 0x00, 0x00, 0x00, 0x51, 0x6D, 0x65, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x68, 0x64, 0x6C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x68, 0x6C, 0x72, 0x6D, 0x64, 0x69, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x69, 0x6C, 0x73, 0x74, 0x00, 0x00, 0x00, 0x1C, 0xA9, 0x74, 0x6F, 0x6F, 0x00, 0x00, 0x00, 0x14, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x78, 0x32, 0x36, 0x34, 0x00, 0x00, 0x00, 0x3D, 0x75, 0x64, 0x74, 0x61, 0x00, 0x00, 0x00, 0x35, 0x6D, 0x65, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x68, 0x64, 0x6C, 0x72, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x68, 0x6C, 0x72, 0x6D, 0x64, 0x69, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x69, 0x6C, 0x73, 0x74}

	tt := []struct {
		input  interface{}
		tvdata *soapcalls.TVPayload
		name   string
	}{
		{
			[]byte(""),
			nil,
			`Check []byte input`,
		},
		{
			io.NopCloser(bytes.NewReader([]byte(""))),
			nil,
			`Check io.Reader input #2`,
		},
		{
			osFileType{
				time: time.Now(),
				file: bytes.NewReader(videoBytes),
				path: "",
			},
			&soapcalls.TVPayload{
				Transcode: false,
				MediaType: "video/mp4",
			},
			`File without transcoding`,
		},
		// This test will fail if we dont have ffmpeg installed
		/* 		{
			osFileType{
				time: time.Now(),
				file: bytes.NewReader(videoBytes),
			},
			&soapcalls.TVPayload{
				Transcode: true,
				MediaType: "video/mp4",
			},
			`File with transcoding`,
		}, */
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			w := httptest.NewRecorder()
			r := httptest.NewRequest(http.MethodGet, "/", nil)

			r.Header.Add("getcontentFeatures.dlna.org", "1")

			serveContent(w, r, tc.tvdata, tc.input, new(exec.Cmd))

			if w.Result().StatusCode != http.StatusOK {
				t.Fatalf("%s: got: %s.", tc.name, w.Result().Status)
			}

			_, exists := w.Result().Header["transferMode.dlna.org"]
			if !exists {
				t.Fatalf("%s: transferMode.dlna.org header does not exist", tc.name)
			}

			cf, exists := w.Result().Header["contentFeatures.dlna.org"]
			if !exists {
				t.Fatalf("%s: contentFeatures.dlna.org header does not exist", tc.name)
			}

			cfElements := strings.Split(cf[0], ";")
			for _, c := range cfElements {
				if strings.Contains(c, "DLNA.ORG_OP") {
					if tc.tvdata != nil && tc.tvdata.Transcode && c != "DLNA.ORG_OP=00" {
						t.Fatalf("%s: no proper DLNA.ORG_OP header for transcoded video", tc.name)
					}
				}
			}
		})
	}
}
